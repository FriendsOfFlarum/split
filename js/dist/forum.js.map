{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@fof/split/webpack/bootstrap","webpack://@fof/split/webpack/runtime/compat get default export","webpack://@fof/split/webpack/runtime/define property getters","webpack://@fof/split/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/split/webpack/runtime/make namespace object","webpack://@fof/split/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/split/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/split/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/split/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@fof/split/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/split/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@fof/split/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/split/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/split/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@fof/split/external root \"flarum.core.compat['common/utils/Stream']\"","webpack://@fof/split/./src/forum/components/SplitPostModal.js","webpack://@fof/split/./src/forum/components/SplitController.js","webpack://@fof/split/external root \"flarum.core.compat['common/components/EventPost']\"","webpack://@fof/split/external root \"flarum.core.compat['common/components/Link']\"","webpack://@fof/split/./src/forum/components/DiscussionSplit.js","webpack://@fof/split/./src/forum/index.js","webpack://@fof/split/./src/forum/addSplitControl.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/Stream'];","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport Stream from 'flarum/common/utils/Stream';\n\nexport default class SplitPostModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.newDiscussionTitle = Stream('');\n  }\n\n  className() {\n    return 'SplitPostModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('fof-split.forum.modal.title');\n  }\n\n  content() {\n    return [\n      m('div', { className: 'Modal-body' }, [\n        m('div', { className: 'Form Form--centered' }, [\n          m('div', { className: 'Form-group' }, [\n            m('label', {}, app.translator.trans('fof-split.forum.modal.new_discussion_label')),\n            m('input', {\n              className: 'FormControl',\n              name: 'new_discussion_title',\n              bidi: this.newDiscussionTitle,\n            }),\n          ]),\n          m('div', { className: 'Form-group' }, [\n            m(\n              Button,\n              {\n                className: 'Button Button--primary Button--block',\n                type: 'submit',\n                loading: this.loading,\n                disabled: !this.newDiscussionTitle(),\n              },\n              app.translator.trans('fof-split.forum.modal.submit_button')\n            ),\n          ]),\n        ]),\n      ]),\n    ];\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    const data = new FormData();\n\n    data.append('title', this.newDiscussionTitle());\n    data.append('start_post_id', this.attrs.split.startPostId);\n    data.append('end_post_number', this.attrs.post.number());\n\n    app\n      .request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/split',\n        serialize: (raw) => raw,\n        body: data,\n      })\n      .then((data) => {\n        let discussion = {};\n        discussion.id = Stream(data.data.id);\n        discussion.slug = Stream(data.data.attributes.slug);\n        discussion.startUser = Stream(data.data.attributes.startUser);\n        discussion.isUnread = Stream(data.data.attributes.isUnread);\n        this.hide();\n        m.route.set(app.route.discussion(discussion));\n      }, this.loaded.bind(this));\n  }\n}\n","export default class SplitController {\n  constructor() {\n    this.reset();\n  }\n\n  start(postId, postNumber) {\n    this.reset();\n\n    this.startPostId = postId;\n\n    $('.PostStream-item').each(function () {\n      if ($(this).attr('data-number') >= postNumber) {\n        $('.flagrow-split-endSplitButton', $(this)).show();\n      }\n    });\n\n    $('.flagrow-split-startSplitButton').hide();\n  }\n\n  end(postNumber) {\n    this.endPostNumber = postNumber;\n  }\n\n  reset() {\n    this.startPostId = null;\n    this.endPostNumber = null;\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/EventPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","import EventPost from 'flarum/common/components/EventPost';\nimport Link from 'flarum/common/components/Link';\n\nexport default class DiscussionSplit extends EventPost {\n  /**\n   * Get the name of the event icon.\n   *\n   * @return {String}\n   */\n  icon() {\n    return 'fas fa-code-branch';\n  }\n\n  /**\n   * Get the translation key for the description of the event.\n   *\n   * @return {String}\n   */\n  descriptionKey() {\n    if (this.attrs.post.content()['toNew']) {\n      return 'fof-split.forum.post.was_split_to';\n    }\n\n    return 'fof-split.forum.post.was_split_from';\n  }\n\n  /**\n   * Get the translation data for the description of the event.\n   *\n   * @return {Object}\n   */\n  descriptionData() {\n    return {\n      count: this.attrs.post.content()['count'],\n      target: (\n        <Link className=\"EventPost-Split-target\" href={this.attrs.post.content()['url']}>\n          {this.attrs.post.content()['title']}\n        </Link>\n      ),\n    };\n  }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\n\nimport addSplitControl from './addSplitControl';\nimport SplitController from './components/SplitController';\nimport DiscussionSplit from './components/DiscussionSplit';\n\napp.initializers.add('fof-split', () => {\n  app.store.models.discussions.prototype.canSplit = Model.attribute('canSplit');\n\n  app.postComponents.discussionSplit = DiscussionSplit;\n\n  const splitController = new SplitController();\n\n  addSplitControl(splitController);\n});\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport Button from 'flarum/common/components/Button';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport SplitPostModal from './components/SplitPostModal';\n\nexport default function (controller) {\n  extend(PostControls, 'moderationControls', function (items, post) {\n    const discussion = post.discussion();\n\n    if (post.contentType() !== 'comment' || !discussion.canSplit() || post.number() == 1) return;\n\n    items.add('splitFrom', [\n      m(\n        Button,\n        {\n          icon: 'fas fa-code-branch',\n          className: 'flagrow-split-startSplitButton',\n          onclick: () => {\n            controller.start(post.id(), post.number());\n          },\n        },\n        app.translator.trans('fof-split.forum.split.from')\n      ),\n    ]);\n  });\n\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const post = this.attrs.post;\n    const discussion = post.discussion();\n\n    if (post.contentType() !== 'comment' || !discussion.canSplit() || post.number() == 1) return;\n\n    items.add('splitTo', [\n      m(\n        Button,\n        {\n          icon: 'fas fa-code-branch',\n          className: 'flagrow-split-endSplitButton Button Button--link',\n          onclick: () => {\n            app.modal.show(SplitPostModal, { split: controller, post: post });\n          },\n          style: { display: 'none' },\n        },\n        app.translator.trans('fof-split.forum.split.to')\n      ),\n    ]);\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","SplitPostModal","oninit","vnode","this","newDiscussionTitle","Stream","className","title","app","content","m","name","bidi","Button","type","loading","disabled","onsubmit","e","preventDefault","data","FormData","append","attrs","split","startPostId","post","number","method","url","serialize","raw","body","then","discussion","id","slug","attributes","startUser","isUnread","hide","route","set","loaded","bind","Modal","SplitController","reset","start","postId","postNumber","$","each","attr","show","end","endPostNumber","DiscussionSplit","icon","descriptionKey","descriptionData","count","target","href","EventPost","Model","controller","splitController","extend","PostControls","items","contentType","canSplit","add","onclick","CommentPost","style","display"],"sourceRoot":""}